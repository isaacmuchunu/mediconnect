# Generated by Django 5.2.5 on 2025-08-15 16:18

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_cryptography.fields
import patients.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ConsentCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Category Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('is_required', models.BooleanField(default=False, verbose_name='Required')),
                ('display_order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
            ],
            options={
                'verbose_name': 'Consent Category',
                'verbose_name_plural': 'Consent Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='HealthcareProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=255, verbose_name='Provider Name')),
                ('provider_type', models.CharField(choices=[('hospital', 'Hospital'), ('clinic', 'Clinic'), ('pharmacy', 'Pharmacy'), ('laboratory', 'Laboratory'), ('imaging_center', 'Imaging Center'), ('specialist', 'Specialist'), ('emergency_service', 'Emergency Service'), ('other', 'Other')], max_length=50, verbose_name='Provider Type')),
                ('address', models.TextField(verbose_name='Address')),
                ('phone', models.CharField(max_length=20, validators=[patients.models.validate_phone_number], verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email Address')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('license_number', models.CharField(blank=True, max_length=100, verbose_name='License Number')),
                ('specialties', models.TextField(blank=True, verbose_name='Specialties')),
                ('is_preferred_provider', models.BooleanField(default=False, verbose_name='Preferred Provider')),
                ('accepts_insurance', models.BooleanField(default=True, verbose_name='Accepts Insurance')),
            ],
            options={
                'verbose_name': 'Healthcare Provider',
                'verbose_name_plural': 'Healthcare Providers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MedicalCondition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('code', models.CharField(help_text='ICD-10 or custom code', max_length=20, unique=True, verbose_name='Condition Code')),
                ('name', models.CharField(max_length=255, verbose_name='Condition Name')),
                ('category', models.CharField(max_length=100, verbose_name='Category')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_chronic', models.BooleanField(default=False, verbose_name='Chronic Condition')),
            ],
            options={
                'verbose_name': 'Medical Condition',
                'verbose_name_plural': 'Medical Conditions',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=255, verbose_name='Medication Name')),
                ('generic_name', models.CharField(blank=True, max_length=255, verbose_name='Generic Name')),
                ('drug_class', models.CharField(max_length=100, verbose_name='Drug Class')),
                ('manufacturer', models.CharField(blank=True, max_length=255, verbose_name='Manufacturer')),
                ('ndc_number', models.CharField(blank=True, max_length=20, unique=True, verbose_name='NDC Number')),
                ('dosage_forms', models.CharField(help_text='e.g., tablet, capsule, injection', max_length=255, verbose_name='Dosage Forms')),
                ('contraindications', models.TextField(blank=True, verbose_name='Contraindications')),
                ('side_effects', models.TextField(blank=True, verbose_name='Common Side Effects')),
            ],
            options={
                'verbose_name': 'Medication',
                'verbose_name_plural': 'Medications',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ComplianceReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('report_type', models.CharField(choices=[('hipaa_audit', 'HIPAA Compliance Audit'), ('data_access', 'Data Access Report'), ('consent_summary', 'Consent Summary'), ('data_sharing', 'Data Sharing Report'), ('security_breach', 'Security Breach Report'), ('patient_rights', 'Patient Rights Report')], max_length=20, verbose_name='Report Type')),
                ('title', models.CharField(max_length=255, verbose_name='Report Title')),
                ('description', models.TextField(blank=True, verbose_name='Report Description')),
                ('date_from', models.DateTimeField(verbose_name='Report Period Start')),
                ('date_to', models.DateTimeField(verbose_name='Report Period End')),
                ('department_filter', models.CharField(blank=True, max_length=100, verbose_name='Department Filter')),
                ('report_data', models.JSONField(default=dict, verbose_name='Report Data')),
                ('findings', models.TextField(blank=True, verbose_name='Key Findings')),
                ('recommendations', models.TextField(blank=True, verbose_name='Recommendations')),
                ('generation_completed', models.BooleanField(default=False, verbose_name='Generation Completed')),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_compliance_reports', to=settings.AUTH_USER_MODEL)),
                ('user_filter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compliance_reports_filtered', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Compliance Report',
                'verbose_name_plural': 'Compliance Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ConsentForm',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('consent_given', models.BooleanField(default=False, verbose_name='Consent Given')),
                ('consent_text', models.TextField(verbose_name='Consent Text')),
                ('consent_version', models.CharField(default='1.0', max_length=10, verbose_name='Consent Version')),
                ('signature_method', models.CharField(choices=[('digital', 'Digital Signature'), ('verbal', 'Verbal Consent'), ('written', 'Written Consent')], max_length=20, verbose_name='Signature Method')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('signed_at', models.DateTimeField(verbose_name='Signed At')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expires At')),
                ('revoked_at', models.DateTimeField(blank=True, null=True, verbose_name='Revoked At')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consent_forms', to='patients.consentcategory')),
                ('signed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signed_consents', to=settings.AUTH_USER_MODEL)),
                ('witness', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='witnessed_consents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Consent Form',
                'verbose_name_plural': 'Consent Forms',
            },
        ),
        migrations.CreateModel(
            name='ConsentAuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('action', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('revoked', 'Revoked'), ('expired', 'Expired'), ('renewed', 'Renewed')], max_length=20, verbose_name='Action')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('details', models.TextField(blank=True, verbose_name='Details')),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('consent_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to='patients.consentform')),
            ],
            options={
                'verbose_name': 'Consent Audit Log',
                'verbose_name_plural': 'Consent Audit Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('patient_id', models.CharField(help_text='Unique hospital identifier', max_length=20, unique=True, verbose_name='Patient ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('middle_name', models.CharField(blank=True, max_length=100, verbose_name='Middle Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('preferred_name', models.CharField(blank=True, max_length=100, verbose_name='Preferred Name')),
                ('date_of_birth', models.DateField(validators=[patients.models.validate_birth_date], verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('NB', 'Non-binary'), ('O', 'Other'), ('P', 'Prefer not to say')], max_length=2, verbose_name='Gender')),
                ('marital_status', models.CharField(blank=True, choices=[('S', 'Single'), ('M', 'Married'), ('D', 'Divorced'), ('W', 'Widowed'), ('P', 'Partnership'), ('O', 'Other')], max_length=1, verbose_name='Marital Status')),
                ('phone_primary', django_cryptography.fields.encrypt(models.CharField(max_length=20, validators=[patients.models.validate_phone_number], verbose_name='Primary Phone'))),
                ('phone_secondary', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20, validators=[patients.models.validate_phone_number], verbose_name='Secondary Phone'))),
                ('email', django_cryptography.fields.encrypt(models.EmailField(max_length=254, verbose_name='Email Address'))),
                ('address_line1', django_cryptography.fields.encrypt(models.CharField(max_length=255, verbose_name='Address Line 1'))),
                ('address_line2', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, verbose_name='Address Line 2'))),
                ('city', django_cryptography.fields.encrypt(models.CharField(max_length=100, verbose_name='City'))),
                ('state_province', django_cryptography.fields.encrypt(models.CharField(max_length=100, verbose_name='State/Province'))),
                ('postal_code', django_cryptography.fields.encrypt(models.CharField(max_length=20, verbose_name='Postal Code'))),
                ('country', models.CharField(default='Kenya', max_length=100, verbose_name='Country')),
                ('emergency_contact_1_name', django_cryptography.fields.encrypt(models.CharField(max_length=255, verbose_name='Emergency Contact 1 Name'))),
                ('emergency_contact_1_phone', django_cryptography.fields.encrypt(models.CharField(max_length=20, validators=[patients.models.validate_phone_number], verbose_name='Emergency Contact 1 Phone'))),
                ('emergency_contact_1_relationship', models.CharField(max_length=50, verbose_name='Relationship')),
                ('emergency_contact_2_name', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, verbose_name='Emergency Contact 2 Name'))),
                ('emergency_contact_2_phone', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20, validators=[patients.models.validate_phone_number], verbose_name='Emergency Contact 2 Phone'))),
                ('emergency_contact_2_relationship', models.CharField(blank=True, max_length=50, verbose_name='Relationship')),
                ('insurance_provider', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, verbose_name='Insurance Provider'))),
                ('insurance_policy_number', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100, verbose_name='Policy Number'))),
                ('insurance_group_number', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100, verbose_name='Group Number'))),
                ('blood_type', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, verbose_name='Blood Type')),
                ('preferred_language', models.CharField(default='English', max_length=50, verbose_name='Preferred Language')),
                ('religion', models.CharField(blank=True, max_length=100, verbose_name='Religion')),
                ('registration_date', models.DateTimeField(auto_now_add=True, verbose_name='Registration Date')),
                ('last_visit', models.DateTimeField(blank=True, null=True, verbose_name='Last Visit')),
                ('is_vip', models.BooleanField(default=False, verbose_name='VIP Patient')),
                ('notes', models.TextField(blank=True, verbose_name='Administrative Notes')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
            },
        ),
        migrations.CreateModel(
            name='MedicalHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('allergies', django_cryptography.fields.encrypt(models.TextField(blank=True, help_text='List all known allergies and reactions', verbose_name='Known Allergies'))),
                ('allergy_severity', models.CharField(blank=True, choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('life_threatening', 'Life Threatening')], max_length=20, verbose_name='Allergy Severity')),
                ('chronic_conditions', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Chronic Conditions'))),
                ('past_illnesses', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Past Illnesses'))),
                ('mental_health_history', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Mental Health History'))),
                ('current_medications', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Current Medications'))),
                ('medication_allergies', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Medication Allergies'))),
                ('surgeries', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Past Surgeries'))),
                ('surgical_complications', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Surgical Complications'))),
                ('family_history', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Family Medical History'))),
                ('genetic_conditions', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Known Genetic Conditions'))),
                ('smoking_status', models.CharField(choices=[('never', 'Never'), ('former', 'Former smoker'), ('current', 'Current smoker'), ('social', 'Social smoker')], default='never', max_length=10, verbose_name='Smoking Status')),
                ('alcohol_consumption', models.CharField(choices=[('never', 'Never'), ('rarely', 'Rarely'), ('moderate', 'Moderate'), ('heavy', 'Heavy')], default='never', max_length=10, verbose_name='Alcohol Consumption')),
                ('exercise_frequency', models.CharField(blank=True, max_length=50, verbose_name='Exercise Frequency')),
                ('diet_restrictions', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Dietary Restrictions'))),
                ('additional_notes', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Additional Notes'))),
                ('last_updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_history_updates', to=settings.AUTH_USER_MODEL)),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='medical_history', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Medical History',
                'verbose_name_plural': 'Medical Histories',
            },
        ),
        migrations.CreateModel(
            name='InsurancePolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('insurance_company', django_cryptography.fields.encrypt(models.CharField(max_length=255, verbose_name='Insurance Company'))),
                ('policy_number', django_cryptography.fields.encrypt(models.CharField(max_length=100, verbose_name='Policy Number'))),
                ('group_number', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100, verbose_name='Group Number'))),
                ('member_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=100, verbose_name='Member ID'))),
                ('policy_type', models.CharField(choices=[('primary', 'Primary Insurance'), ('secondary', 'Secondary Insurance'), ('supplemental', 'Supplemental Insurance'), ('SHIF', 'SHIF'), ('SHA', 'SHA'), ('workers_comp', 'Workers Compensation'), ('other', 'Other')], max_length=15, verbose_name='Policy Type')),
                ('effective_date', models.DateField(verbose_name='Effective Date')),
                ('expiration_date', models.DateField(blank=True, null=True, verbose_name='Expiration Date')),
                ('coverage_details', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Coverage Details'))),
                ('copay_amount', django_cryptography.fields.encrypt(models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Copay Amount'))),
                ('deductible_amount', django_cryptography.fields.encrypt(models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Deductible Amount'))),
                ('insurance_phone', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20, verbose_name='Insurance Phone'))),
                ('claims_address', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Claims Address'))),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('cancelled', 'Cancelled'), ('suspended', 'Suspended')], default='active', max_length=15, verbose_name='Status')),
                ('last_verified', models.DateTimeField(blank=True, null=True, verbose_name='Last Verified')),
                ('verified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_insurance_policies', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insurance_policies', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Insurance Policy',
                'verbose_name_plural': 'Insurance Policies',
                'ordering': ['policy_type', '-effective_date'],
            },
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('first_name', django_cryptography.fields.encrypt(models.CharField(max_length=100, verbose_name='First Name'))),
                ('last_name', django_cryptography.fields.encrypt(models.CharField(max_length=100, verbose_name='Last Name'))),
                ('relationship', models.CharField(max_length=50, verbose_name='Relationship')),
                ('phone_primary', django_cryptography.fields.encrypt(models.CharField(max_length=20, validators=[patients.models.validate_phone_number], verbose_name='Primary Phone'))),
                ('phone_secondary', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20, validators=[patients.models.validate_phone_number], verbose_name='Secondary Phone'))),
                ('email', django_cryptography.fields.encrypt(models.EmailField(blank=True, max_length=254, verbose_name='Email Address'))),
                ('address', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Address'))),
                ('priority_order', models.PositiveIntegerField(default=1, help_text='1 = Primary contact, 2 = Secondary, etc.', verbose_name='Priority Order')),
                ('can_make_medical_decisions', models.BooleanField(default=False, verbose_name='Can Make Medical Decisions')),
                ('preferred_contact_method', models.CharField(choices=[('phone', 'Phone'), ('email', 'Email'), ('sms', 'SMS'), ('any', 'Any Method')], default='phone', max_length=20, verbose_name='Preferred Contact Method')),
                ('available_24_7', models.BooleanField(default=True, verbose_name='Available 24/7')),
                ('availability_notes', models.TextField(blank=True, verbose_name='Availability Notes')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_contacts', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Emergency Contact',
                'verbose_name_plural': 'Emergency Contacts',
                'ordering': ['priority_order'],
            },
        ),
        migrations.CreateModel(
            name='DataSharingAgreement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('sharing_type', models.CharField(choices=[('referral', 'Medical Referral'), ('emergency', 'Emergency Services'), ('research', 'Research Study'), ('insurance', 'Insurance Processing'), ('pharmacy', 'Pharmacy'), ('lab', 'Laboratory'), ('imaging', 'Medical Imaging'), ('other', 'Other')], max_length=15, verbose_name='Sharing Type')),
                ('recipient_organization', models.CharField(max_length=255, verbose_name='Recipient Organization')),
                ('recipient_contact', models.CharField(blank=True, max_length=255, verbose_name='Recipient Contact')),
                ('recipient_email', models.EmailField(blank=True, max_length=254, verbose_name='Recipient Email')),
                ('include_demographics', models.BooleanField(default=True, verbose_name='Include Demographics')),
                ('include_medical_history', models.BooleanField(default=False, verbose_name='Include Medical History')),
                ('include_medications', models.BooleanField(default=False, verbose_name='Include Medications')),
                ('include_allergies', models.BooleanField(default=True, verbose_name='Include Allergies')),
                ('include_vital_signs', models.BooleanField(default=False, verbose_name='Include Vital Signs')),
                ('include_lab_results', models.BooleanField(default=False, verbose_name='Include Lab Results')),
                ('purpose', models.TextField(verbose_name='Purpose of Sharing')),
                ('data_retention_period', models.PositiveIntegerField(default=365, verbose_name='Data Retention Period (days)')),
                ('effective_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Effective Date')),
                ('expiration_date', models.DateTimeField(verbose_name='Expiration Date')),
                ('patient_signature', models.TextField(blank=True, verbose_name='Patient Digital Signature')),
                ('authorized_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authorized_sharing_agreements', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sharing_agreements', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Data Sharing Agreement',
                'verbose_name_plural': 'Data Sharing Agreements',
            },
        ),
        migrations.CreateModel(
            name='DataAccessLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('access_type', models.CharField(choices=[('view_profile', 'View Profile'), ('edit_profile', 'Edit Profile'), ('view_medical_history', 'View Medical History'), ('edit_medical_history', 'Edit Medical History'), ('view_medications', 'View Medications'), ('edit_medications', 'Edit Medications'), ('view_documents', 'View Documents'), ('upload_document', 'Upload Document'), ('data_export', 'Data Export'), ('data_sharing', 'Data Sharing'), ('other', 'Other')], max_length=25, verbose_name='Access Type')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('session_id', models.CharField(blank=True, max_length=100, verbose_name='Session ID')),
                ('purpose', models.TextField(blank=True, verbose_name='Purpose of Access')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='Department')),
                ('fields_accessed', models.JSONField(blank=True, default=list, verbose_name='Fields Accessed')),
                ('data_exported', models.BooleanField(default=False, verbose_name='Data Exported')),
                ('accessed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Data Access Log',
                'verbose_name_plural': 'Data Access Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='consentform',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consent_forms', to='patients.patient'),
        ),
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('allergen_type', models.CharField(choices=[('drug', 'Drug/Medication'), ('food', 'Food'), ('environmental', 'Environmental'), ('contact', 'Contact'), ('other', 'Other')], max_length=15, verbose_name='Allergen Type')),
                ('allergen_name', django_cryptography.fields.encrypt(models.CharField(max_length=255, verbose_name='Allergen Name'))),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('anaphylaxis', 'Anaphylaxis')], max_length=15, verbose_name='Severity')),
                ('symptoms', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Symptoms'))),
                ('onset_date', models.DateField(blank=True, null=True, verbose_name='First Reaction Date')),
                ('last_reaction_date', models.DateField(blank=True, null=True, verbose_name='Last Reaction Date')),
                ('verification_method', models.CharField(blank=True, choices=[('patient_report', 'Patient Report'), ('clinical_test', 'Clinical Test'), ('medical_record', 'Medical Record')], max_length=50, verbose_name='Verification Method')),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Additional Notes'))),
                ('verified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_allergies', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allergies', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Allergy',
                'verbose_name_plural': 'Allergies',
            },
        ),
        migrations.CreateModel(
            name='PatientCondition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('diagnosed_date', models.DateField(verbose_name='Diagnosed Date')),
                ('resolved_date', models.DateField(blank=True, null=True, verbose_name='Resolved Date')),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('critical', 'Critical')], max_length=10, verbose_name='Severity')),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('chronic', 'Chronic'), ('in_remission', 'In Remission')], default='active', max_length=15, verbose_name='Status')),
                ('notes', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Clinical Notes'))),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.medicalcondition')),
                ('diagnosed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='diagnosed_conditions', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Patient Condition',
                'verbose_name_plural': 'Patient Conditions',
            },
        ),
        migrations.CreateModel(
            name='PatientDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('document_type', models.CharField(choices=[('id_document', 'ID Document'), ('insurance_card', 'Insurance Card'), ('medical_report', 'Medical Report'), ('lab_result', 'Lab Result'), ('imaging_report', 'Imaging Report'), ('consent_form', 'Consent Form'), ('referral_letter', 'Referral Letter'), ('discharge_summary', 'Discharge Summary'), ('other', 'Other')], max_length=20, verbose_name='Document Type')),
                ('title', models.CharField(max_length=255, verbose_name='Document Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('file_name', django_cryptography.fields.encrypt(models.CharField(max_length=255, verbose_name='Original File Name'))),
                ('file_size', models.PositiveIntegerField(verbose_name='File Size (bytes)')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME Type')),
                ('file_hash', models.CharField(help_text='SHA-256 hash for integrity verification', max_length=64, verbose_name='File Hash')),
                ('is_confidential', models.BooleanField(default=True, verbose_name='Confidential')),
                ('last_accessed', models.DateTimeField(blank=True, null=True, verbose_name='Last Accessed')),
                ('access_count', models.PositiveIntegerField(default=0, verbose_name='Access Count')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='patients.patient')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Patient Document',
                'verbose_name_plural': 'Patient Documents',
            },
        ),
        migrations.CreateModel(
            name='DocumentAccess',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('access_type', models.CharField(choices=[('view', 'View'), ('download', 'Download'), ('print', 'Print'), ('share', 'Share')], max_length=20, verbose_name='Access Type')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('accessed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='patients.patientdocument')),
            ],
            options={
                'verbose_name': 'Document Access Log',
                'verbose_name_plural': 'Document Access Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PatientMedication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('dosage', models.CharField(max_length=100, verbose_name='Dosage')),
                ('frequency', models.CharField(max_length=100, verbose_name='Frequency')),
                ('route', models.CharField(choices=[('oral', 'Oral'), ('injection', 'Injection'), ('topical', 'Topical'), ('inhalation', 'Inhalation'), ('other', 'Other')], max_length=50, verbose_name='Route of Administration')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('discontinued', 'Discontinued'), ('paused', 'Paused')], default='active', max_length=15, verbose_name='Status')),
                ('indication', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Indication'))),
                ('instructions', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Special Instructions'))),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.medication')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='patients.patient')),
                ('prescribed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prescribed_medications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Patient Medication',
                'verbose_name_plural': 'Patient Medications',
            },
        ),
        migrations.CreateModel(
            name='PatientNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('note_type', models.CharField(choices=[('clinical', 'Clinical Note'), ('progress', 'Progress Note'), ('discharge', 'Discharge Note'), ('consultation', 'Consultation Note'), ('administrative', 'Administrative Note'), ('care_plan', 'Care Plan'), ('other', 'Other')], max_length=15, verbose_name='Note Type')),
                ('title', models.CharField(max_length=255, verbose_name='Note Title')),
                ('content', django_cryptography.fields.encrypt(models.TextField(verbose_name='Note Content'))),
                ('visit_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Visit Date')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='Department')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('final', 'Final'), ('amended', 'Amended'), ('deleted', 'Deleted')], default='draft', max_length=10, verbose_name='Status')),
                ('confidentiality_level', models.CharField(choices=[('normal', 'Normal'), ('restricted', 'Restricted'), ('confidential', 'Confidential'), ('sensitive', 'Sensitive')], default='normal', max_length=15, verbose_name='Confidentiality Level')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authored_notes', to=settings.AUTH_USER_MODEL)),
                ('co_signed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='co_signed_notes', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinical_notes', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Patient Note',
                'verbose_name_plural': 'Patient Notes',
                'ordering': ['-visit_date'],
            },
        ),
        migrations.CreateModel(
            name='PatientPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('preferred_communication', models.CharField(choices=[('phone', 'Phone Call'), ('sms', 'SMS'), ('email', 'Email'), ('mail', 'Postal Mail'), ('portal', 'Patient Portal'), ('in_person', 'In Person Only')], default='phone', max_length=20, verbose_name='Preferred Communication')),
                ('appointment_reminders', models.BooleanField(default=True, verbose_name='Appointment Reminders')),
                ('medication_reminders', models.BooleanField(default=False, verbose_name='Medication Reminders')),
                ('health_tips', models.BooleanField(default=False, verbose_name='Health Tips')),
                ('marketing_communications', models.BooleanField(default=False, verbose_name='Marketing Communications')),
                ('preferred_appointment_time', models.CharField(choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening'), ('no_preference', 'No Preference')], default='no_preference', max_length=20, verbose_name='Preferred Appointment Time')),
                ('interpreter_needed', models.BooleanField(default=False, verbose_name='Interpreter Needed')),
                ('interpreter_language', models.CharField(blank=True, max_length=50, verbose_name='Interpreter Language')),
                ('mobility_assistance', models.BooleanField(default=False, verbose_name='Mobility Assistance Needed')),
                ('hearing_assistance', models.BooleanField(default=False, verbose_name='Hearing Assistance Needed')),
                ('visual_assistance', models.BooleanField(default=False, verbose_name='Visual Assistance Needed')),
                ('allow_voicemail', models.BooleanField(default=True, verbose_name='Allow Voicemail')),
                ('allow_family_discussion', models.BooleanField(default=True, verbose_name='Allow Family Discussion')),
                ('special_instructions', django_cryptography.fields.encrypt(models.TextField(blank=True, verbose_name='Special Instructions'))),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Patient Preferences',
                'verbose_name_plural': 'Patient Preferences',
            },
        ),
        migrations.CreateModel(
            name='PatientProviderRelationship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('relationship_type', models.CharField(choices=[('primary_care', 'Primary Care Physician'), ('specialist', 'Specialist'), ('consulting', 'Consulting Physician'), ('referring', 'Referring Physician'), ('emergency', 'Emergency Contact'), ('pharmacy', 'Pharmacy'), ('other', 'Other')], max_length=20, verbose_name='Relationship Type')),
                ('start_date', models.DateField(verbose_name='Relationship Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Relationship End Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('transferred', 'Transferred')], default='active', max_length=15, verbose_name='Status')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provider_relationships', to='patients.patient')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_relationships', to='patients.healthcareprovider')),
            ],
            options={
                'verbose_name': 'Patient-Provider Relationship',
                'verbose_name_plural': 'Patient-Provider Relationships',
            },
        ),
        migrations.CreateModel(
            name='VitalSigns',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('height_cm', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(300)], verbose_name='Height (cm)')),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(500)], verbose_name='Weight (kg)')),
                ('systolic_bp', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)], verbose_name='Systolic BP')),
                ('diastolic_bp', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)], verbose_name='Diastolic BP')),
                ('heart_rate', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(250)], verbose_name='Heart Rate (bpm)')),
                ('temperature_c', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(45)], verbose_name='Temperature (°C)')),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)], verbose_name='Respiratory Rate')),
                ('oxygen_saturation', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)], verbose_name='Oxygen Saturation (%)')),
                ('measurement_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Measurement Date')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('measured_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vital_measurements', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='patients.patient')),
            ],
            options={
                'verbose_name': 'Vital Signs',
                'verbose_name_plural': 'Vital Signs',
                'ordering': ['-measurement_date'],
            },
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['patient_id'], name='patients_pa_patient_927c52_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['last_name', 'first_name'], name='patients_pa_last_na_1b32a7_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['date_of_birth'], name='patients_pa_date_of_4302f5_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['registration_date'], name='patients_pa_registr_b5cb97_idx'),
        ),
        migrations.AddIndex(
            model_name='insurancepolicy',
            index=models.Index(fields=['patient', 'policy_type'], name='patients_in_patient_902cb6_idx'),
        ),
        migrations.AddIndex(
            model_name='insurancepolicy',
            index=models.Index(fields=['effective_date', 'expiration_date'], name='patients_in_effecti_855763_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='emergencycontact',
            unique_together={('patient', 'priority_order')},
        ),
        migrations.AddIndex(
            model_name='datasharingagreement',
            index=models.Index(fields=['patient', 'sharing_type'], name='patients_da_patient_fab521_idx'),
        ),
        migrations.AddIndex(
            model_name='datasharingagreement',
            index=models.Index(fields=['expiration_date'], name='patients_da_expirat_678773_idx'),
        ),
        migrations.AddIndex(
            model_name='dataaccesslog',
            index=models.Index(fields=['patient', 'access_type'], name='patients_da_patient_25aeec_idx'),
        ),
        migrations.AddIndex(
            model_name='dataaccesslog',
            index=models.Index(fields=['accessed_by'], name='patients_da_accesse_4034d9_idx'),
        ),
        migrations.AddIndex(
            model_name='dataaccesslog',
            index=models.Index(fields=['created_at'], name='patients_da_created_309b25_idx'),
        ),
        migrations.AddIndex(
            model_name='consentform',
            index=models.Index(fields=['patient', 'category'], name='patients_co_patient_595ef1_idx'),
        ),
        migrations.AddIndex(
            model_name='consentform',
            index=models.Index(fields=['signed_at'], name='patients_co_signed__461c24_idx'),
        ),
        migrations.AddIndex(
            model_name='consentform',
            index=models.Index(fields=['expires_at'], name='patients_co_expires_656b44_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='consentform',
            unique_together={('patient', 'category', 'consent_version')},
        ),
        migrations.AlterUniqueTogether(
            name='allergy',
            unique_together={('patient', 'allergen_name')},
        ),
        migrations.AlterUniqueTogether(
            name='patientcondition',
            unique_together={('patient', 'condition', 'diagnosed_date')},
        ),
        migrations.AddIndex(
            model_name='patientdocument',
            index=models.Index(fields=['patient', 'document_type'], name='patients_pa_patient_377653_idx'),
        ),
        migrations.AddIndex(
            model_name='patientdocument',
            index=models.Index(fields=['created_at'], name='patients_pa_created_bbf6da_idx'),
        ),
        migrations.AddIndex(
            model_name='patientmedication',
            index=models.Index(fields=['patient', 'status'], name='patients_pa_patient_267899_idx'),
        ),
        migrations.AddIndex(
            model_name='patientmedication',
            index=models.Index(fields=['start_date'], name='patients_pa_start_d_1bacf4_idx'),
        ),
        migrations.AddIndex(
            model_name='patientnote',
            index=models.Index(fields=['patient', 'note_type'], name='patients_pa_patient_89ceac_idx'),
        ),
        migrations.AddIndex(
            model_name='patientnote',
            index=models.Index(fields=['visit_date'], name='patients_pa_visit_d_794757_idx'),
        ),
        migrations.AddIndex(
            model_name='patientnote',
            index=models.Index(fields=['author'], name='patients_pa_author__14c677_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='patientproviderrelationship',
            unique_together={('patient', 'provider', 'relationship_type')},
        ),
        migrations.AddIndex(
            model_name='vitalsigns',
            index=models.Index(fields=['patient', 'measurement_date'], name='patients_vi_patient_e107d6_idx'),
        ),
    ]
