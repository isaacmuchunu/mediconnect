# Generated by Django 4.2.11 on 2025-08-21 16:56

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('referrals', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ambulance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('license_plate', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid license plate format', regex='^[A-Z0-9\\-\\s]+$')], verbose_name='License Plate')),
                ('vehicle_identification_number', models.CharField(max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid VIN format', regex='^[A-HJ-NPR-Z0-9]{17}$')], verbose_name='VIN')),
                ('make', models.CharField(max_length=50, verbose_name='Make')),
                ('model', models.CharField(max_length=50, verbose_name='Model')),
                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1990), django.core.validators.MaxValueValidator(2030)], verbose_name='Year')),
                ('color', models.CharField(max_length=30, verbose_name='Color')),
                ('mileage', models.PositiveIntegerField(default=0, verbose_name='Mileage')),
                ('patient_capacity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Patient Capacity')),
                ('crew_capacity', models.PositiveIntegerField(default=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)], verbose_name='Crew Capacity')),
                ('equipment_list', models.JSONField(default=list, verbose_name='Equipment List')),
                ('medical_equipment', models.TextField(blank=True, verbose_name='Medical Equipment')),
                ('status', models.CharField(choices=[('available', 'Available'), ('dispatched', 'Dispatched'), ('en_route', 'En Route'), ('on_scene', 'On Scene'), ('transporting', 'Transporting'), ('at_hospital', 'At Hospital'), ('returning', 'Returning'), ('out_of_service', 'Out of Service'), ('maintenance', 'Under Maintenance'), ('offline', 'Offline')], default='available', max_length=20, verbose_name='Status')),
                ('condition', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('critical', 'Critical')], default='good', max_length=15, verbose_name='Condition')),
                ('current_latitude', models.FloatField(blank=True, null=True, verbose_name='Current Latitude')),
                ('current_longitude', models.FloatField(blank=True, null=True, verbose_name='Current Longitude')),
                ('base_latitude', models.FloatField(blank=True, null=True, verbose_name='Base Latitude')),
                ('base_longitude', models.FloatField(blank=True, null=True, verbose_name='Base Longitude')),
                ('fuel_level', models.PositiveIntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Fuel Level (%)')),
                ('last_maintenance', models.DateTimeField(blank=True, null=True, verbose_name='Last Maintenance')),
                ('next_maintenance', models.DateTimeField(blank=True, null=True, verbose_name='Next Maintenance')),
                ('gps_device_id', models.CharField(blank=True, max_length=50, verbose_name='GPS Device ID')),
                ('last_gps_update', models.DateTimeField(blank=True, null=True, verbose_name='Last GPS Update')),
                ('speed', models.FloatField(default=0.0, verbose_name='Current Speed (km/h)')),
                ('heading', models.FloatField(default=0.0, verbose_name='Heading (degrees)')),
                ('insurance_policy', models.CharField(blank=True, max_length=100, verbose_name='Insurance Policy')),
                ('registration_expiry', models.DateField(blank=True, null=True, verbose_name='Registration Expiry')),
                ('inspection_expiry', models.DateField(blank=True, null=True, verbose_name='Inspection Expiry')),
            ],
            options={
                'verbose_name': 'Ambulance',
                'verbose_name_plural': 'Ambulances',
                'ordering': ['license_plate'],
            },
        ),
        migrations.CreateModel(
            name='AmbulanceStation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=100, verbose_name='Station Name')),
                ('code', models.CharField(max_length=10, unique=True, verbose_name='Station Code')),
                ('address', models.TextField(verbose_name='Address')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone')),
                ('capacity', models.PositiveIntegerField(default=5, verbose_name='Ambulance Capacity')),
                ('is_24_hour', models.BooleanField(default=True, verbose_name='24 Hour Operation')),
            ],
            options={
                'verbose_name': 'Ambulance Station',
                'verbose_name_plural': 'Ambulance Stations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AmbulanceType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Type Name')),
                ('code', models.CharField(max_length=20, unique=True, verbose_name='Type Code')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('equipment_requirements', models.JSONField(default=list, verbose_name='Equipment Requirements')),
                ('staff_requirements', models.JSONField(default=list, verbose_name='Staff Requirements')),
                ('capacity_range', models.CharField(default='1-2', max_length=20, verbose_name='Capacity Range')),
            ],
            options={
                'verbose_name': 'Ambulance Type',
                'verbose_name_plural': 'Ambulance Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Dispatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('dispatch_number', models.CharField(max_length=20, unique=True, verbose_name='Dispatch Number')),
                ('status', models.CharField(choices=[('requested', 'Requested'), ('assigned', 'Assigned'), ('dispatched', 'Dispatched'), ('en_route_pickup', 'En Route to Pickup'), ('on_scene', 'On Scene'), ('patient_loaded', 'Patient Loaded'), ('en_route_hospital', 'En Route to Hospital'), ('at_hospital', 'At Hospital'), ('patient_delivered', 'Patient Delivered'), ('returning', 'Returning to Base'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='requested', max_length=25, verbose_name='Status')),
                ('priority', models.CharField(choices=[('routine', 'Routine'), ('urgent', 'Urgent'), ('emergency', 'Emergency'), ('critical', 'Critical')], default='routine', max_length=15, verbose_name='Priority')),
                ('pickup_latitude', models.FloatField(blank=True, null=True, verbose_name='Pickup Latitude')),
                ('pickup_longitude', models.FloatField(blank=True, null=True, verbose_name='Pickup Longitude')),
                ('pickup_address', models.TextField(verbose_name='Pickup Address')),
                ('destination_latitude', models.FloatField(blank=True, null=True, verbose_name='Destination Latitude')),
                ('destination_longitude', models.FloatField(blank=True, null=True, verbose_name='Destination Longitude')),
                ('destination_address', models.TextField(verbose_name='Destination Address')),
                ('planned_route_data', models.JSONField(blank=True, null=True, verbose_name='Planned Route Data')),
                ('actual_route_data', models.JSONField(blank=True, null=True, verbose_name='Actual Route Data')),
                ('distance_km', models.FloatField(blank=True, null=True, verbose_name='Distance (km)')),
                ('requested_at', models.DateTimeField(auto_now_add=True, verbose_name='Requested At')),
                ('dispatched_at', models.DateTimeField(blank=True, null=True, verbose_name='Dispatched At')),
                ('en_route_at', models.DateTimeField(blank=True, null=True, verbose_name='En Route At')),
                ('on_scene_at', models.DateTimeField(blank=True, null=True, verbose_name='On Scene At')),
                ('patient_loaded_at', models.DateTimeField(blank=True, null=True, verbose_name='Patient Loaded At')),
                ('at_hospital_at', models.DateTimeField(blank=True, null=True, verbose_name='At Hospital At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('estimated_pickup_time', models.DateTimeField(blank=True, null=True, verbose_name='Estimated Pickup Time')),
                ('estimated_arrival_time', models.DateTimeField(blank=True, null=True, verbose_name='Estimated Arrival Time')),
                ('patient_condition', models.TextField(blank=True, verbose_name='Patient Condition')),
                ('medical_equipment_used', models.JSONField(default=list, verbose_name='Medical Equipment Used')),
                ('vital_signs', models.JSONField(default=dict, verbose_name='Vital Signs')),
                ('medications_administered', models.JSONField(default=list, verbose_name='Medications Administered')),
                ('contact_person', models.CharField(blank=True, max_length=100, verbose_name='Contact Person')),
                ('contact_phone', models.CharField(blank=True, max_length=20, verbose_name='Contact Phone')),
                ('special_instructions', models.TextField(blank=True, verbose_name='Special Instructions')),
                ('response_time_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Response Time (minutes)')),
                ('transport_time_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Transport Time (minutes)')),
                ('patient_satisfaction', models.PositiveIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='Patient Satisfaction')),
                ('billing_code', models.CharField(blank=True, max_length=50, verbose_name='Billing Code')),
                ('insurance_authorization', models.CharField(blank=True, max_length=100, verbose_name='Insurance Authorization')),
                ('ambulance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dispatches', to='ambulances.ambulance', verbose_name='Ambulance')),
                ('dispatcher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispatched_calls', to=settings.AUTH_USER_MODEL, verbose_name='Dispatcher')),
            ],
            options={
                'verbose_name': 'Dispatch',
                'verbose_name_plural': 'Dispatches',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='MaintenanceRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('maintenance_type', models.CharField(choices=[('routine', 'Routine Maintenance'), ('repair', 'Repair'), ('inspection', 'Inspection'), ('emergency', 'Emergency Repair'), ('upgrade', 'Equipment Upgrade')], max_length=20, verbose_name='Maintenance Type')),
                ('description', models.TextField(verbose_name='Description')),
                ('performed_by', models.CharField(max_length=100, verbose_name='Performed By')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Cost')),
                ('parts_replaced', models.JSONField(default=list, verbose_name='Parts Replaced')),
                ('mileage_at_service', models.PositiveIntegerField(verbose_name='Mileage at Service')),
                ('next_service_mileage', models.PositiveIntegerField(blank=True, null=True, verbose_name='Next Service Mileage')),
                ('service_date', models.DateTimeField(verbose_name='Service Date')),
                ('next_service_date', models.DateTimeField(blank=True, null=True, verbose_name='Next Service Date')),
                ('ambulance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='ambulances.ambulance')),
            ],
            options={
                'verbose_name': 'Maintenance Record',
                'verbose_name_plural': 'Maintenance Records',
                'ordering': ['-service_date'],
            },
        ),
        migrations.CreateModel(
            name='IncidentReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('incident_type', models.CharField(choices=[('accident', 'Traffic Accident'), ('mechanical', 'Mechanical Failure'), ('medical', 'Medical Emergency'), ('equipment', 'Equipment Failure'), ('personnel', 'Personnel Issue'), ('patient', 'Patient Incident'), ('other', 'Other')], max_length=20, verbose_name='Incident Type')),
                ('severity', models.CharField(choices=[('minor', 'Minor'), ('moderate', 'Moderate'), ('major', 'Major'), ('critical', 'Critical')], max_length=15, verbose_name='Severity')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('incident_latitude', models.FloatField(blank=True, null=True, verbose_name='Incident Latitude')),
                ('incident_longitude', models.FloatField(blank=True, null=True, verbose_name='Incident Longitude')),
                ('location_description', models.CharField(blank=True, max_length=255, verbose_name='Location Description')),
                ('incident_time', models.DateTimeField(verbose_name='Incident Time')),
                ('injuries', models.BooleanField(default=False, verbose_name='Injuries Involved')),
                ('property_damage', models.BooleanField(default=False, verbose_name='Property Damage')),
                ('police_involved', models.BooleanField(default=False, verbose_name='Police Involved')),
                ('police_report_number', models.CharField(blank=True, max_length=50, verbose_name='Police Report Number')),
                ('insurance_claim', models.CharField(blank=True, max_length=50, verbose_name='Insurance Claim Number')),
                ('follow_up_required', models.BooleanField(default=False, verbose_name='Follow-up Required')),
                ('resolved', models.BooleanField(default=False, verbose_name='Resolved')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Resolution Notes')),
                ('ambulance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_reports', to='ambulances.ambulance')),
                ('dispatch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incident_reports', to='ambulances.dispatch')),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported_incidents', to=settings.AUTH_USER_MODEL)),
                ('witnesses', models.ManyToManyField(blank=True, related_name='witnessed_incidents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Incident Report',
                'verbose_name_plural': 'Incident Reports',
                'ordering': ['-incident_time'],
            },
        ),
        migrations.CreateModel(
            name='FuelLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('fuel_amount', models.FloatField(verbose_name='Fuel Amount (L)')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Cost')),
                ('mileage', models.PositiveIntegerField(verbose_name='Mileage')),
                ('fuel_station', models.CharField(blank=True, max_length=100, verbose_name='Fuel Station')),
                ('receipt_number', models.CharField(blank=True, max_length=50, verbose_name='Receipt Number')),
                ('ambulance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuel_logs', to='ambulances.ambulance')),
                ('filled_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Fuel Log',
                'verbose_name_plural': 'Fuel Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DispatchStatusHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('old_status', models.CharField(choices=[('requested', 'Requested'), ('assigned', 'Assigned'), ('dispatched', 'Dispatched'), ('en_route_pickup', 'En Route to Pickup'), ('on_scene', 'On Scene'), ('patient_loaded', 'Patient Loaded'), ('en_route_hospital', 'En Route to Hospital'), ('at_hospital', 'At Hospital'), ('patient_delivered', 'Patient Delivered'), ('returning', 'Returning to Base'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], max_length=25, verbose_name='Old Status')),
                ('new_status', models.CharField(choices=[('requested', 'Requested'), ('assigned', 'Assigned'), ('dispatched', 'Dispatched'), ('en_route_pickup', 'En Route to Pickup'), ('on_scene', 'On Scene'), ('patient_loaded', 'Patient Loaded'), ('en_route_hospital', 'En Route to Hospital'), ('at_hospital', 'At Hospital'), ('patient_delivered', 'Patient Delivered'), ('returning', 'Returning to Base'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], max_length=25, verbose_name='New Status')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('changed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('dispatch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='ambulances.dispatch')),
            ],
            options={
                'verbose_name': 'Dispatch Status History',
                'verbose_name_plural': 'Dispatch Status Histories',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DispatchCrew',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('role', models.CharField(choices=[('driver', 'Driver'), ('paramedic', 'Paramedic'), ('emt', 'EMT'), ('nurse', 'Nurse'), ('doctor', 'Doctor')], max_length=20, verbose_name='Role')),
                ('is_lead', models.BooleanField(default=False, verbose_name='Lead Crew Member')),
                ('crew_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('dispatch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ambulances.dispatch')),
            ],
            options={
                'verbose_name': 'Dispatch Crew',
                'verbose_name_plural': 'Dispatch Crews',
                'unique_together': {('dispatch', 'crew_member')},
            },
        ),
        migrations.AddField(
            model_name='dispatch',
            name='primary_crew',
            field=models.ManyToManyField(related_name='dispatches', through='ambulances.DispatchCrew', to=settings.AUTH_USER_MODEL, verbose_name='Dispatch Crew'),
        ),
        migrations.AddField(
            model_name='dispatch',
            name='referral',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dispatches', to='referrals.referral', verbose_name='Referral'),
        ),
        migrations.CreateModel(
            name='AmbulanceCrew',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('role', models.CharField(choices=[('driver', 'Driver'), ('paramedic', 'Paramedic'), ('emt', 'EMT'), ('nurse', 'Nurse'), ('doctor', 'Doctor')], max_length=20, verbose_name='Role')),
                ('shift_start', models.DateTimeField(verbose_name='Shift Start')),
                ('shift_end', models.DateTimeField(verbose_name='Shift End')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary Assignment')),
                ('ambulance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ambulances.ambulance')),
                ('crew_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ambulance Crew',
                'verbose_name_plural': 'Ambulance Crews',
            },
        ),
        migrations.AddField(
            model_name='ambulance',
            name='ambulance_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ambulances.ambulancetype', verbose_name='Ambulance Type'),
        ),
        migrations.AddField(
            model_name='ambulance',
            name='assigned_crew',
            field=models.ManyToManyField(related_name='assigned_ambulances', through='ambulances.AmbulanceCrew', to=settings.AUTH_USER_MODEL, verbose_name='Assigned Crew'),
        ),
        migrations.AddField(
            model_name='ambulance',
            name='home_station',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ambulances.ambulancestation', verbose_name='Home Station'),
        ),
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('date', models.DateField(verbose_name='Date')),
                ('total_dispatches', models.PositiveIntegerField(default=0, verbose_name='Total Dispatches')),
                ('completed_dispatches', models.PositiveIntegerField(default=0, verbose_name='Completed Dispatches')),
                ('cancelled_dispatches', models.PositiveIntegerField(default=0, verbose_name='Cancelled Dispatches')),
                ('average_response_time', models.DurationField(blank=True, null=True, verbose_name='Average Response Time')),
                ('total_distance', models.FloatField(default=0.0, verbose_name='Total Distance (km)')),
                ('fuel_consumed', models.FloatField(default=0.0, verbose_name='Fuel Consumed (L)')),
                ('operational_hours', models.FloatField(default=0.0, verbose_name='Operational Hours')),
                ('downtime_hours', models.FloatField(default=0.0, verbose_name='Downtime Hours')),
                ('patient_satisfaction_avg', models.FloatField(blank=True, null=True, verbose_name='Average Patient Satisfaction')),
                ('incident_count', models.PositiveIntegerField(default=0, verbose_name='Incident Count')),
                ('ambulance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='ambulances.ambulance')),
            ],
            options={
                'verbose_name': 'Performance Metrics',
                'verbose_name_plural': 'Performance Metrics',
                'ordering': ['-date'],
                'unique_together': {('ambulance', 'date')},
            },
        ),
        migrations.CreateModel(
            name='GPSTrackingLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('speed', models.FloatField(default=0.0, verbose_name='Speed (km/h)')),
                ('heading', models.FloatField(default=0.0, verbose_name='Heading (degrees)')),
                ('altitude', models.FloatField(blank=True, null=True, verbose_name='Altitude (m)')),
                ('accuracy', models.FloatField(blank=True, null=True, verbose_name='GPS Accuracy (m)')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('ambulance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gps_logs', to='ambulances.ambulance')),
                ('dispatch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gps_logs', to='ambulances.dispatch')),
            ],
            options={
                'verbose_name': 'GPS Tracking Log',
                'verbose_name_plural': 'GPS Tracking Logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['ambulance', 'timestamp'], name='ambulances__ambulan_2e86c6_idx'), models.Index(fields=['dispatch', 'timestamp'], name='ambulances__dispatc_94abf9_idx')],
            },
        ),
        migrations.CreateModel(
            name='EquipmentInventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('equipment_name', models.CharField(max_length=100, verbose_name='Equipment Name')),
                ('equipment_code', models.CharField(blank=True, max_length=50, verbose_name='Equipment Code')),
                ('category', models.CharField(max_length=50, verbose_name='Category')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('condition', models.CharField(choices=[('new', 'New'), ('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('defective', 'Defective')], default='good', max_length=15, verbose_name='Condition')),
                ('serial_number', models.CharField(blank=True, max_length=100, verbose_name='Serial Number')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Expiry Date')),
                ('last_checked', models.DateTimeField(blank=True, null=True, verbose_name='Last Checked')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('ambulance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_inventory', to='ambulances.ambulance')),
                ('checked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Equipment Inventory',
                'verbose_name_plural': 'Equipment Inventories',
                'unique_together': {('ambulance', 'equipment_name', 'serial_number')},
            },
        ),
        migrations.AddIndex(
            model_name='dispatch',
            index=models.Index(fields=['status', 'priority'], name='ambulances__status_f1873f_idx'),
        ),
        migrations.AddIndex(
            model_name='dispatch',
            index=models.Index(fields=['ambulance', 'status'], name='ambulances__ambulan_655f3b_idx'),
        ),
        migrations.AddIndex(
            model_name='dispatch',
            index=models.Index(fields=['requested_at', 'status'], name='ambulances__request_1583e2_idx'),
        ),
        migrations.AddIndex(
            model_name='dispatch',
            index=models.Index(fields=['dispatch_number'], name='ambulances__dispatc_10a101_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ambulancecrew',
            unique_together={('ambulance', 'crew_member', 'shift_start')},
        ),
        migrations.AddIndex(
            model_name='ambulance',
            index=models.Index(fields=['status', 'ambulance_type'], name='ambulances__status_f3470a_idx'),
        ),
        migrations.AddIndex(
            model_name='ambulance',
            index=models.Index(fields=['home_station', 'status'], name='ambulances__home_st_8e4428_idx'),
        ),
        migrations.AddIndex(
            model_name='ambulance',
            index=models.Index(fields=['last_gps_update'], name='ambulances__last_gp_43c90f_idx'),
        ),
    ]
