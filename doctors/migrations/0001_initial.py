# Generated by Django 5.2.5 on 2025-08-15 16:34

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DoctorProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('N', 'Prefer not to say')], max_length=1)),
                ('date_of_birth', models.DateField()),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='doctors/photos/')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('license_state', models.CharField(max_length=50)),
                ('license_expiry_date', models.DateField()),
                ('npi_number', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='NPI must be 10 digits', regex='^\\d{10}$')])),
                ('dea_number', models.CharField(blank=True, max_length=9, validators=[django.core.validators.RegexValidator(message='DEA number format: XX1234567', regex='^[A-Z]{2}\\d{7}$')])),
                ('phone', models.CharField(max_length=20)),
                ('emergency_phone', models.CharField(blank=True, max_length=20)),
                ('office_address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=50)),
                ('zip_code', models.CharField(max_length=10)),
                ('medical_school', models.CharField(max_length=200)),
                ('graduation_year', models.PositiveIntegerField()),
                ('residency_program', models.CharField(max_length=200)),
                ('fellowship_programs', models.TextField(blank=True, help_text='List fellowship programs separated by commas')),
                ('board_certifications', models.TextField(blank=True, help_text='List certifications separated by commas')),
                ('bio', models.TextField(blank=True, max_length=2000)),
                ('years_of_experience', models.PositiveIntegerField(default=0)),
                ('languages_spoken', models.CharField(blank=True, help_text='Languages separated by commas', max_length=200)),
                ('accepts_insurance', models.BooleanField(default=True)),
                ('telehealth_available', models.BooleanField(default=False)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending Verification'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('consultation_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('emergency_availability', models.BooleanField(default=False)),
                ('accepts_referrals', models.BooleanField(default=True)),
                ('max_patients_per_day', models.PositiveIntegerField(default=20)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('referral_acceptance_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_doctors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('relationship', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_contacts', to='doctors.doctorprofile')),
            ],
            options={
                'ordering': ['-is_primary', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=50)),
                ('zip_code', models.CharField(max_length=10)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True, null=True)),
                ('type', models.CharField(choices=[('general', 'General Hospital'), ('specialty', 'Specialty Hospital'), ('clinic', 'Clinic'), ('emergency', 'Emergency Center'), ('rehabilitation', 'Rehabilitation Center'), ('psychiatric', 'Psychiatric Hospital')], max_length=50)),
                ('bed_capacity', models.PositiveIntegerField(default=0)),
                ('emergency_services', models.BooleanField(default=True)),
                ('trauma_center_level', models.CharField(choices=[('I', 'Level I'), ('II', 'Level II'), ('III', 'Level III'), ('IV', 'Level IV'), ('N/A', 'Not Applicable')], default='N/A', max_length=10)),
                ('accreditation', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['city', 'state'], name='doctors_hos_city_172ae5_idx'), models.Index(fields=['type'], name='doctors_hos_type_112f39_idx')],
            },
        ),
        migrations.AddField(
            model_name='doctorprofile',
            name='affiliated_hospitals',
            field=models.ManyToManyField(blank=True, related_name='affiliated_doctors', to='doctors.hospital'),
        ),
        migrations.AddField(
            model_name='doctorprofile',
            name='primary_hospital',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_doctors', to='doctors.hospital'),
        ),
        migrations.CreateModel(
            name='ReferralStats',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_referrals_received', models.PositiveIntegerField(default=0)),
                ('referrals_accepted', models.PositiveIntegerField(default=0)),
                ('referrals_declined', models.PositiveIntegerField(default=0)),
                ('referrals_pending', models.PositiveIntegerField(default=0)),
                ('total_referrals_sent', models.PositiveIntegerField(default=0)),
                ('average_response_time', models.DurationField(default=datetime.timedelta(days=1))),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('doctor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='referral_stats', to='doctors.doctorprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Specialty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent_specialty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subspecialties', to='doctors.specialty')),
            ],
            options={
                'verbose_name_plural': 'Specialties',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='doctorprofile',
            name='primary_specialty',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_doctors', to='doctors.specialty'),
        ),
        migrations.AddField(
            model_name='doctorprofile',
            name='specialties',
            field=models.ManyToManyField(blank=True, related_name='doctors', to='doctors.specialty'),
        ),
        migrations.CreateModel(
            name='DoctorReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reviewer_name', models.CharField(max_length=100)),
                ('reviewer_email', models.EmailField(max_length=254)),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_title', models.CharField(max_length=200)),
                ('review_text', models.TextField()),
                ('bedside_manner_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('expertise_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('visit_date', models.DateField()),
                ('would_recommend', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='doctors.doctorprofile')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['doctor', '-created_at'], name='doctors_doc_doctor__985c1b_idx'), models.Index(fields=['rating'], name='doctors_doc_rating_9c4ab7_idx')],
            },
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('weekday', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('slot_duration', models.PositiveIntegerField(default=30, help_text='Duration in minutes')),
                ('max_patients', models.PositiveIntegerField(default=1)),
                ('current_bookings', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('available', 'Available'), ('booked', 'Booked'), ('blocked', 'Blocked'), ('emergency', 'Emergency Only')], default='available', max_length=20)),
                ('appointment_type', models.CharField(choices=[('consultation', 'Consultation'), ('follow_up', 'Follow-up'), ('emergency', 'Emergency'), ('procedure', 'Procedure'), ('telehealth', 'Telehealth')], default='consultation', max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurring_until', models.DateField(blank=True, null=True)),
                ('google_calendar_event_id', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to='doctors.doctorprofile')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doctor_availability', to='doctors.hospital')),
            ],
            options={
                'ordering': ['date', 'start_time'],
                'indexes': [models.Index(fields=['doctor', 'date'], name='doctors_ava_doctor__645d56_idx'), models.Index(fields=['date', 'status'], name='doctors_ava_date_373d4a_idx')],
                'unique_together': {('doctor', 'date', 'start_time', 'location')},
            },
        ),
        migrations.AddIndex(
            model_name='doctorprofile',
            index=models.Index(fields=['license_number'], name='doctors_doc_license_49ebb1_idx'),
        ),
        migrations.AddIndex(
            model_name='doctorprofile',
            index=models.Index(fields=['city', 'state'], name='doctors_doc_city_69d2e0_idx'),
        ),
        migrations.AddIndex(
            model_name='doctorprofile',
            index=models.Index(fields=['verification_status'], name='doctors_doc_verific_78e9ef_idx'),
        ),
        migrations.AddIndex(
            model_name='doctorprofile',
            index=models.Index(fields=['primary_specialty'], name='doctors_doc_primary_50be06_idx'),
        ),
    ]
